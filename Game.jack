class Game{
    field List balls ; 
    field Bar bar ; 
    field Grid grid ; 
    static int  Px , Py ; 
    static int BPx , BPy ;  
    static int ballRadius ; 
    static int barHeight , barWidth ;
    field int GridRows,GridCols,GridSizeY,GridSizeX;
    static int frameRateTime ; // simple calc of  1 divided by the  estimated top number of images per seconds Multiplied by 1000 rounded to the to tenth number 
    static int locationMask ; 
    function void init(){
        let Px = 512 ; // width of the screen 
        let Py = 256 ; // height of the screen 
        let BPx = 256; // middle of 511
        let BPy = 216; // 256 - 8 * 5
        let ballRadius = 2; 
        let barHeight = Bar.getSizeHeight(); 
        let barWidth = Bar.getSizeWidth(); 
        let frameRateTime = 80; //frame Rate is about 13 ...
        let locationMask = ~(7) ; 
        return ; 
    }
    constructor Game new(int levelN){
        var Levels level ; 
        let level = Levels.new(levelN) ; 
        let GridRows = level.getSizeY() ; 
        let GridCols =  level.getSizeX() ; 
        let GridSizeY = ExtendedMath.shiftLeft3(GridRows);
        let GridSizeX =ExtendedMath.shiftLeft3(GridCols);
        let balls = level.getBalls();
        let bar = Bar.new(BPx,BPy);       
        let grid = level.getGrid(); // how many blocks we want in the game
        do grid.draw(); 
        return this ; 
    }

    method bool frame(int keyPressed){
        var Ball ballTMP , nBall; 
        var List index,prev; 
        var int nX , nY , bX;
        var int  x0 , y0 , dx , dy , D , y ,x ;  
        var int type ; 
        var boolean ended ; 
        var int stepY , stepX ; 
        var int i , j ; 
        let index = balls; 
        let bX = bar.getLocationX() ;
        do Screen.setColor(false); //erase
        while(~(index = null)){
            let ballTMP = index.getCurrentValue(); 
            do ballTMP.draw(); 
            let index = index.getCurrentNext(); 
            
        }
        do Screen.setColor(true); //start drawing
        if( keyPressed = 130 ){//left 
            do bar.erase(); 
            do bar.moveLeft() ; 
            let bX = bar.getLocationX() ;            
        }
        if(keyPressed = 132 ){ //right 
            do bar.erase(); 
            do bar.moveRight() ;
            let bX = bar.getLocationX() ;
        }
        let prev = null ; 
        let index = balls; 
        while(~(index = null)){
            let ballTMP = index.getCurrentValue(); 
            let nX = ballTMP.getNextLocationX();
            let nY = ballTMP.getNextLocationY();
            let x0 = ballTMP.getLocationX(); 
            let y0 = ballTMP.getLocationY(); 
            let dx = nX - x0 ; 
            let dy = nY - y0 ; 
            let stepX = 1; 
            let stepY = 1; 
            let D = ExtendedMath.shiftLeft1(dy) - dx ; 
            let y=y0 ; 
            let x = x0 ; 
            let ended = true ; 
            if( x0 > nX){
                let stepX = -1 ; 
            }
            if(y0 > nY ){
                let stepY = -1 ;  
            }
            while((~(x = nX ) ) & (~(y = nY))& (ended) ){
                if((x >  GridSizeX) | (y > GridSizeY)){
                    let ended =false ; 
                }
                else{
                    
                    let  j  = Math.divide(x,8); 
                    let i = Math.divide(y,8); 
                    if((x&7) = 0 ){
                        let j = j -1; 
                    }
                    if((y&7) =0 ){
                        let i = i -1 ; 
                    }
                    let type =grid.getType(j,i);
                    if(~( type= 0 )){
                        if(((y & 7 ) = 1 )| ((y & 7 ) = 0 ) ){
                            do ballTMP.chageDirX();
                        
                        }
                        else{
                            do ballTMP.chageDirY();
                        }
  
                    do grid.eraseIndex(j,i);
                    do grid.eraseIndexR(Math.min(j+1 , GridCols -1 ),i);
                    do grid.eraseIndexR(Math.max(j-1,0),i);
                    do grid.eraseIndexR(j,Math.min(i+1 ,GridRows -1 ));
                    do grid.eraseIndexR(j,Math.max(i-1,0));
                    do grid.drawIndex(Math.min(j+1 , GridCols -1 ),i);
                    do grid.drawIndex(Math.max(j-1,0),i);
                    do grid.drawIndex(j,Math.min(i+1 ,GridRows -1 ));
                    do grid.drawIndex(j,Math.max(i-1,0));
            
                   
                    let nX = (x&locationMask) + 8; 
                    let nY  =(y&locationMask)+8 ; 
                    let ended = false ; 
                }
                if(D > 0 ){
                    let y = y+stepY ; 
                    let D = D + ExtendedMath.shiftLeft1(dy) - ExtendedMath.shiftLeft1(dx);
                }
                else{
                    let D =D + ExtendedMath.shiftLeft1(dy);
                    let x = x+stepX ; 
                }
                }
                
           
            } 
            if((nX + ballRadius) > Px  ){
                do ballTMP.chageDirY();
                let nX = Px - ballRadius ; 
                let nY = ballTMP.getNextLocationY();
            }
            if((nX-ballRadius) < 0){
                do ballTMP.chageDirY();
                let nX = ballRadius ; 
                let nX = nX + Random.getRandomAdress(); 
                let nY = ballTMP.getNextLocationY();
            }
            if((nY+ballRadius) > Py ){
                if(balls.getCurrentNext() = null){
                    do balls.dispose();
                    return false ; 
                }
                if(prev = null){
                    let balls = index.getCurrentNext() ; 
                }
                if (~(prev =null)){
                    do prev.setCurrentNext(index.getCurrentNext());
                }
                do Screen.setColor(false); //erase
                do ballTMP.draw();
                do Memory.deAlloc(ballTMP);
                
            }
            if((nY-ballRadius) < 0 ){
                do ballTMP.chageDirX();
                let nX = ballTMP.getNextLocationX();
                let nY = ballRadius;
            }
            if( (nX > (bX-ballRadius) ) & (nX <  (barWidth + bX + ballRadius)) & (nY > (BPy-ballRadius)) & (nY < (barHeight + BPy + ballRadius)) ){
                 do ballTMP.chageDirX();
                let nX = ballTMP.getNextLocationX();
                let nY = BPy - ballRadius;
                if(keyPressed = 132 ){ //right 
                    let D = ballTMP.getDirX() ; 
                    if(D = -1 ){
                        do ballTMP.setDirX(1);
                    }
                    else{
                        do ballTMP.setDirX(Math.max(2,D+1));
                    }
                }
                if(keyPressed = 130){ //right 
                    let D = ballTMP.getDirX() ; 
                    if(D = 1 ){
                        do ballTMP.setDirX(-1);
                    }
                    else{
                        do ballTMP.setDirX(Math.min(-2,D-1));
                    }
                }
            }
            do ballTMP.setLocation(Math.min(Px - ballRadius - 1  ,Math.max(nX,ballRadius)),(Math.min(Py -ballRadius -1  , Math.max(nY,ballRadius))));
            do ballTMP.draw(); 
            let index = index.getCurrentNext(); 
            let prev = index ;
        }
        do bar.draw();

        return true; 
    }

    method bool play(){
        var int keyPressed,i; 
        var bool res ; 
        let i =0 ;
        while(true){
            let keyPressed = Keyboard.keyPressed();
            let res =  frame(keyPressed);
            if(~res){
                return false ;
            }
            let i = i+1; 
            if(grid.isEmpty()){
              return true;
            }
            do Sys.wait(80);
        }
        return true ; 
    }

    method void dispose(){ 
        do grid.dispose();
        do Memory.deAlloc(bar); 
        do Memory.deAlloc(grid);
        return ; 
    }





}